########################################################################
#cargar la base de datos iris (sólo la especie setosa)
set<-iris[iris$Species=="setosa",]
plot(set$Petal.Width, set$Petal.Length) #puedo predecir la longitud del petalo con la longitud del sepalo?
plot(set$Sepal.Width, set$Sepal.Length) #puedo predecir el ancho del sepalo con la longitud del sepalo?
plot(set$Petal.Length, set$Sepal.Length) #puedo predecir la longitud del petalo con la longitud del sepalo?
plot(set$Sepal.Width, set$Sepal.Length) #puedo predecir el ancho del sepalo con la longitud del sepalo?
plot(set$Sepal.Length, set$Sepal.Width,) #puedo predecir el ancho del sepalo con la longitud del sepalo?
plot(set$Petal.Length, set$Petal.Width) #puedo predecir la longitud del petalo con la longitud del sepalo?
?lm
#Planteamiento de modelos
mod0<-lm(set$Petal.Length ~ 1) # y= b0 : H0 (la pendiente, b1 es cero)
mod1<-lm(set$Petal.Length ~ set$Petal.Width) # y = b0 + b1x
#El metodo rapido es:
anova(mod0, mod1, test= "LRT") # p= 1.582e-14
#Ahora estimamos las verosimilitudes
logLik(mod0) #En este caso los grados de libertad es igual al numero de parametros menos 1, pero como parametro tambien esta siendo contado la varianza
logLik(mod1)
?logLik
#cuanta variacion no es explicada por el modelo: DEVIANZA
-2*logLik(mod0)
-2*logLik(mod1)
#Likelihood ratio test
-2*logLik(mod0) - 2*logLik(mod1)
?pchisq
#El valor del likelihood ratio test se compara con una distribucion de chi cuadrada
#1-pchisq(valor del likelihood ratio test, 1) #se uso un grado de libertad
1 - pchisq(-74.18463, 1)
1 - pchisq(-74.18463, 1)
#Likelihood ratio test
-2*logLik(mod1) - 2*logLik(mod0)
#Likelihood ratio test
-2*logLik(mod0) - 2*logLik(mod1)
pchisq(-74.18463, 1)
#Likelihood ratio test
-2*logLik(mod1) - 2*logLik(mod0)
summary(mod0)
summary(mod1)
#Ahora estimamos las verosimilitudes
logLik(mod0)
logLik(mod1)
# Cuanta variacion no es explicada por cada modelo: DEVIANZA
-2*logLik(mod0)
-2*logLik(mod1)
pchisq(11.05474,df=2,lower.tail=FALSE)
#Likelihood ratio test
-2*(as.numeric(logLik(mod0))) - 2*(as.numeric(logLik(mod1)))
pchisq(-74.18463, 1)
pchisq(-74.18463, 1, lower.tail=FALSE)
#El valor del likelihood ratio test se compara con una distribucion de chi cuadrada
#1-pchisq(valor del likelihood ratio test, 1) #se uso un grado de libertad
1 - pchisq(-74.18463, 1)
#El metodo rapido es:
anova(mod1, mod0, test= "LRT") # p= 0.01487
#El metodo rapido es:
anova(mod0, mod1, test= "LRT") # p= 0.01487
?as.numeric
-2*logLik(mod0) - 2*logLik(mod1)
#El valor del likelihood ratio test se compara con una distribucion de chi cuadrada
#1-pchisq(valor del likelihood ratio test, 1) #se uso un grado de libertad
1 - pchisq(-74.18463, 2)
#El valor del likelihood ratio test se compara con una distribucion de chi cuadrada
#1-pchisq(valor del likelihood ratio test, 1) #se uso un grado de libertad
1 - pchisq(-74.18463, 1)
plot(set$Petal.Length, set$Petal.Width) #puedo predecir la longitud del petalo con la longitud del sepalo?
#El metodo rapido es:
anova(mod0, mod1) # p= 0.01487
#El valor del likelihood ratio test se compara con una distribucion de chi cuadrada
1 - pchisq(-74.18463, 1)
#Planteamiento de modelos
mod0<-lm(set$Petal.Length ~ 0) # y= b0 : H0 (la pendiente, b1 es cero)
mod1<-lm(set$Petal.Length ~ set$Petal.Width) # y = b0 + b1x
# Estimar las log verosimilitudes
logLik(mod0) #df = 2
logLik(mod1) #df = 3
-2*logLik(mod0) #-34.17957
-2*logLik(mod1) # -40.00505
#Likelihood ratio test
-2*logLik(mod0) - 2*logLik(mod1)
1 - pchisq(140.556, 2)
set<-iris[iris$Species=="setosa",]
mod0<-lm(set$Sepal.Length ~ 1) # y= b0 : H0 (la pendiente, b1 es cero)
mod1<-lm(set$Sepal.Length ~ set$Sepal.Width) # y = b0 + b1x
mod2<-lm(set$Sepal.Length ~ set$Petal.Length)
mod3<-lm(set$Sepal.Length ~ set$Sepal.Width+set$Petal.Length)
aics<-data.frame(AIC(mod0, mod1, mod2, mod3),row.names=NULL)
aics$model <-c("mod0", "mod1", "mod2", "mod3")
aics<-aics[order(-aics$AIC),]
View(aics)
for(i in 1:dim(aics)[1]){
aics$diff[i]<-aics$AIC[1]-aics$AIC[i]}
View(aics)
aics$AIC[1]
View(aics)
for(i in 1:dim(aics)[1]){
aics$diff[i]<-aics$AIC[4]-aics$AIC[i]}
View(aics)
dim(aics)[1]
for(i in 1:dim(aics)[1]){
aics$diff[i]<-aics$AIC[i]-aics$AIC[4]}
View(aics)
for(i in 1:dim(aics)[1]){
aics$deltaAIC[i]<-aics$AIC[i]-aics$AIC[4]}
aics<-data.frame(AIC(mod0, mod1, mod2, mod3),row.names=NULL)
aics$model <-c("mod0", "mod1", "mod2", "mod3")
aics<-aics[order(-aics$AIC),]
for(i in 1:dim(aics)[1]){
aics$deltaAIC[i]<-aics$AIC[i]-aics$AIC[4]}
View(aics)
AIC(mod0, mod1, mod2, mod3)-AIC(mod3) #calculamos las delta AIC
View(aics)
exp(0.5*aics$deltaAIC)
aics$wi<-exp(0.5*aics$deltaAIC)
aics$aic.weights<-aics$wi/sum(aics$wi)
View(aics)
aics$wi<-exp(-0.5*aics$deltaAIC)
aics$aic.weights<-aics$wi/sum(aics$wi)
View(aics)
View(aics)
View(aics)
View(aics)
View(aics)
View(aics)
View(aics)
View(aics)
View(aics)
View(aics)
install.packages("MCMCglmm")
library(MCMCglmm)
set<-iris[iris$Species=="setosa",]
mod1<-MCMCglmm(set$Sepal.Length ~ set$Sepal.Width)
mod1<-MCMCglmm(set$Sepal.Length ~ set$Sepal.Width, data = set)
mod1<-MCMCglmm(Sepal.Length ~ Sepal.Width, data = set)
summary(mod1)
plot(mod1)
f1<-function (x) b+ (w-x) +(z+t)*x - w(x²)
f1<-function (x) b+ (w-x) +(z+t)*x - w(x^2)
curve(f1, 0, 100)
f1<-function (x) 2+ (4-8) +(6+5)*x - 9(x^2)
curve(f1, 0, 100)
f1<-function(x) 2+ (4-8) +(6+5)*x - 9(x^2)
curve(f1, 0, 100)
f1<-function(x) 2+ (4-8) +(6+5)*x
curve(f1, 0, 100)
f1<-function(x) 2+ (4-8) +(6+5)*x - 9*(x^2)
curve(f1, 0, 100)
curve(f1, -100, 100)
f2<-function(x) 2+ (6*x) - 9*(x^2)
curve(f2, -100, 100)
plot(f2, -100, 100)
plot(f1, -100, 100)
plot(f2, -100, 100)
lines(f1, -100, 100)
plot(f2, -100, 100)
par(new=TRUE)
plot(f1, -100, 100)
plot(f2, -100, 100)
par(new=TRUE)
plot(f1, -100, 100)
f1<-function(x) 2*x - 5*(x^2) + 7*(x^(2*8))
plot(f1, -100, 100)
f1<-function(x) 2*x - 5*(x^2) + 7*(x^(2*8))
plot(f1, -100, 100)
f1<-function(x) 2*x - 5*(x^2) + 7*((x^2)*8)
plot(f1, -100, 100)
f1<-function(x) 2*x - 5*(x^2) - 7*((x^2)*8)
plot(f1, -100, 100)
fa<-function(x) 2*x - 5*(x^8) - 7*((x^2)*8)
plot(fa, -100, 100)
f1<-function(x) 2*x - 5*(x^2) - 7*((x^2)*8)
plot(f1, -100, 100)
f1<-function(x) 2*x - 5*(x^2) - 7*((x^2)*8)
plot(f1, -100, 100)
f2<-function(x) 2*x - 5*(x^2)
plot(f2, -100, 100)
f1<-function(x) 2*x - 5*(x^2) - 7*((x^2)*8)
f2<-function(x) 2*x - 5*(x^2)
plot(f2, -100, 100)
par(new=TRUE)
plot(f1, -100, 100)
f1<-function(x) 2*x - 5*(x^2) - 7*((x^2)*8)
f2<-function(x) 2*x - 5*(x^2)
plot(f2, -100, 100)
points(f1, -100, 100)
plot(f1, -100, 100)
grid()
A<-plot(f2, -100, 100)
B<-plot(f1, -100, 100)
library(ggplot2)
ggplot(df, aes(x)) +                    # basic graphical object
geom_line(aes(y=A), colour="red") +  # first layer
geom_line(aes(y=B), colour="green")  # second layer
x<-c(-100:100)
ggplot(df, aes(x)) +                    # basic graphical object
geom_line(aes(y=A), colour="red") +  # first layer
geom_line(aes(y=B), colour="green")  # second laye
f1<-function(x) 2*x - 5*(x^2) - 7*((x^2)*8)
f2<-function(x) 2*x - 5*(x^2)
plot(f2, -100, 100)
plot(f1, -100, 100, add=TRUE)
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue" add=TRUE)
f1<-function(x) 2*x - 5*(x^2) - 7*((x^2)*8)
f2<-function(x) 2*x - 5*(x^2)
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue", add=TRUE)
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue")
f1<-function(x) 2*x - 5*(x^2) - 7*((x^2)*8)
f2<-function(x) 2*x - 5*(x^2)
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue", add=TRUE)
grid()
f1<-function(x) 2*x - 5*(x^2) + 7*((x^2)*8)
f2<-function(x) 2*x - 5*(x^2)
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue", add=TRUE)
grid()
f1<-function(x) 2*x - 5*(x^2) - 3*((x^2)*8)
f2<-function(x) 2*x - 5*(x^2)
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue", add=TRUE)
grid()
f1<-function(x) 2*x - 5*(x^2) - 3*((x^2)*8)
f2<-function(x) 2*x - 5*(x^2) -3
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue", add=TRUE)
grid()
f1<-function(x) 2*x - 5*(x^2) - 3*(x^2)*8
f2<-function(x) 2*x - 5*(x^2) -3
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue", add=TRUE)
grid()
f1<-function(x) 2*x - 5*(x^2) - 3*(x^2)*8
f2<-function(x) 2*x - 5*(x^2) -3
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue", add=TRUE)
grid()
f1<-function(x) 2*x - 5*((x-5)^2) - 3*(x^2)*8
f2<-function(x) 2*x - 5*((x-5)^2) -3
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue", add=TRUE)
grid()
f1<-function(x) 2*x - 5*(x^2) - 3*(x^2)*8
f2<-function(x) 2*x - 5*(x^2) -9
plot(f2, -100, 100, col="green")
plot(f1, -100, 100, col="blue", add=TRUE)
grid()
plot(f2, -100, 100, col="green")
f1<-function(x) 2*x - 5*(x^2) - 3*(x^2)*8
f2<-function(x) 2*x - 5*(x^2) -9
plot(f2, 0, 100, col="green")
plot(f1, 0, 100, col="blue", add=TRUE)
grid()
f1<-function(x) 2*x - 5*(x^2) - 3*(x^2)*8
f2<-function(x) 2*x - 5*(x^2) -3
plot(f2, 0, 100, col="green")
plot(f1, 0, 100, col="blue", add=TRUE)
grid()
f1<-function(x) 2*x - 5*(x^2) - 3*(x^2)*8
f2<-function(x) (2*x)+5 - 5*(x^2) -3
plot(f2, 0, 100, col="green")
plot(f1, 0, 100, col="blue", add=TRUE)
grid()
plot(f2, 0, 100, col="green")
f2<-function(x) 2*x - 5*(x^2) -3
plot(f2, 0, 100, col="green")
f2<-function(x) 20*x - 5*(x^2) -3
plot(f2, 0, 100, col="green")
f2<-function(x) 2*x - 5*(x^2) -90
plot(f2, 0, 100, col="green")
f2<-function(x) 2*x - 5*(x^2)
plot(f2, 0, 100, col="green")
f2<-function(x) 2*x
plot(f2, 0, 100, col="green")
f2<-function(x) 2*x + 5*(x*8) -3*(x^2)*8
plot(f2, 0, 100, col="green")
f2<-function(x) 2*x
f4<-function(x) 2*x + 5*(x*8) -3*(x^2)*8
plot(f2, 0, 100, col="green")
plot(f4, 0, 100, col="blue", add=TRUE)
plot(f2, 0, 10, col="green")
plot(f4, 0, 10, col="blue", add=TRUE)
grid()
install.packages("adegenet")
data<-summary(npk)
data<-npk
View(data)
levels(data$block)
modAll<-lmer(yield~ N + P + K + N:K +N:P + P:K + N:P:K + (1|block), data)
library(lme4)
modAll<-lmer(yield~ N + P + K + N:K +N:P + P:K + N:P:K + (1|block), data)
modN<-lmer(yield~ P + K + P:K + (1|block), data)
modK<-lmer(yield~ N + P + N:P + (1|block), data)
modP<-lmer(yield~ N + K + N:K + (1|block), data)
data<-npk
modAll<-lmer(yield~ N + P + K + N:K +N:P + P:K + N:P:K + (1|block), data)
modN<-lmer(yield~ P + K + P:K + (1|block), data)
modK<-lmer(yield~ N + P + N:P + (1|block), data)
modP<-lmer(yield~ N + K + N:K + (1|block), data)
library(lme4)
modAll<-lmer(yield~ N + P + K + N:K +N:P + P:K + N:P:K + (1|block), data)
modN<-lmer(yield~ P + K + P:K + (1|block), data)
modK<-lmer(yield~ N + P + N:P + (1|block), data)
modP<-lmer(yield~ N + K + N:K + (1|block), data)
anova(modAll)
summary(modAll)
library(ggplot2)
modP<-lmer(yield~ k + N + N:K + (1|block), data)
modP<-lmer(yield~ K + N + N:K + (1|block), data)
setwd("~/")
library(lme4)
data<-npk
#modAll: incluye a los tres nutrientes y sus interacciones
modAll<-lmer(yield~ N + P + K + N:K +N:P + P:K + N:P:K + (1|block), data)
modPK<-lmer(yield~ P + K + P:K + (1|block), data)
modNP<-lmer(yield~ N + P + N:P + (1|block), data)
modKN<-lmer(yield~ K + N + N:K + (1|block), data)
modP<-lmer(yield~ P + (1|block), data)
modN<-lmer(yield~ N + (1|block), data)
modK<-lmer(yield~ K + (1|block), data)
summary(modPK)
ranef(modPK)
?ranef
summary(modNP)
ranef(modNP)
summary(modKN)
#block    (Intercept) 13.57    3.684
#Residual             14.36    3.790
#Number of obs: 24, groups:  block, 6
#
#Fixed effects:
#  Estimate Std. Error t value
#(Intercept)   52.883      2.158  24.508
#K1            -1.633      2.188  -0.746
#N1             7.967      2.188   3.641
#K1:N1         -4.700      3.094  -1.519
ranef(modKN)
summary(modP)
ranef(modP)
summary(modN)
summary(modK)
#Random effects:
#  Groups   Name        Variance Std.Dev.
#block    (Intercept) 10.73    3.275
#Residual             25.76    5.075
#Number of obs: 24, groups:  block, 6
#
#Fixed effects:
#  Estimate Std. Error t value
#(Intercept)   56.867      1.983  28.671
#K1            -3.983      2.072  -1.923
ranef(modK)
View(data)
modAll<-lmer(yield~ N + P + K + N:K +N:P + P:K + N:P:K + (1|block), data, REML=F)
# Modificar los modelos para utilizar ML y no REML
anova(modAll, modPK, modNP, modKN, modP, modN, modK)
anova(modAll, modPK, modNP, modKN, modP, modN, modK, modnull)
modnull<-lmer(yield~ 1 + (1|block), data, REML=F) #modelo nulo
anova(modAll, modPK, modNP, modKN, modP, modN, modK, modnull)
getwd()
if (!require("devtools")) install.packages("devtools")
#install the package from *Github*
devtools::install_github("rystanley/genepopedit")
#install the package from *Github*
devtools::install_github("rystanley/genepopedit")
#install the package from *Github*
devtools::install_github("rystanley/genepopedit")
devtools::install_github("rystanley/genepopedit")
install.packages("DESeq2")
library(DESeq2)
install.packages("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
install.packages("BiocVersion")
#Read Heterozygocis data and hybrid index
Het<-read.table("../out_flin-rel/run2_3_bgc_flinckii_religiosa/het.out", sep = ",", header = TRUE)
getwd()
setwd("Documents/GBS_Abies/out_TMVB/admixture_TMVB/")
data<-read.csv("cv_abies_mac2_mmiss050_minDP10.csv")
View(data)
plot(data$k~data$cv_value)
plot(data$cv_value~data$k)
boxplot(data$cv_value~data$k)
boxplot(data$cv_value~data$k, xlab= "K", ylab= CV value)
boxplot(data$cv_value~data$k, xlab= "K", ylab= "CV value")
boxplot(data$cv_value~data$k, xlab= "K", ylab= "CV value", las=2)
boxplot(data$cv_value~data$k, xlab= "K", ylab= "CV value")
pdf("CV_values_Abies_mac2_mmiss050_minDP10.pdf")
boxplot(data$cv_value~data$k, xlab= "K", ylab= "CV value")
dev.off()
setwd("../../out_religiosa_NoMan/admixture_noMan/")
data<-read.csv("cv_values.csv")
pdf("CV_values_AbiesreligiosaNoMan_mac2_mmiss050_minDP10.pdf")
View(data)
boxplot(data$cv_value~data$k, xlab= "K", ylab= "CV value")
dev.off()
